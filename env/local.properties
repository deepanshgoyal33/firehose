## This is the sample configuration file for Firehose having the
## default/sample values of all sink variables.
## Refer - https://goto.gitbook.io/firehose/reference/configuration
## for detailed description of each configuration variable.
#
#
#############################################
#
## Generic
#
KAFKA_RECORD_PARSER_MODE=message
SINK_TYPE=http
INPUT_SCHEMA_PROTO_CLASS=com.gotocompany.firehose.consumer.SensorData
# INPUT_SCHEMA_PROTO_TO_COLUMN_MAPPING={"1":"order_number","2":"event_timestamp","3":"driver_id"}
# METRIC_STATSD_HOST=localhost
# METRIC_STATSD_PORT=8125
# METRIC_STATSD_TAGS=team=data-engineering,app=firehose
# APPLICATION_THREAD_CLEANUP_DELAY=2000
# APPLICATION_THREAD_COUNT=2
# TRACE_JAEGAR_ENABLE=true
 LOG_LEVEL=info
#
#
#############################################
#
## Stencil Client
#
SCHEMA_REGISTRY_STENCIL_ENABLE=true
SCHEMA_REGISTRY_STENCIL_URLS=http://stencil.integration.gtfdata.io/v1beta1/namespaces/gopay/schemas/test3
# SCHEMA_REGISTRY_STENCIL_FETCH_TIMEOUT_MS=10000
# SCHEMA_REGISTRY_STENCIL_FETCH_RETRIES=3
# SCHEMA_REGISTRY_STENCIL_FETCH_BACKOFF_MIN_MS=60000
# SCHEMA_REGISTRY_STENCIL_FETCH_AUTH_BEARER_TOKEN=w4073co37dbr78079nunfm1sbtw2a12a818pq49zmkon2n84
#SCHEMA_REGISTRY_STENCIL_CACHE_AUTO_REFRESH=false
#SCHEMA_REGISTRY_STENCIL_REFRESH_STRATEGY=LONG_POLLING
# SCHEMA_REGISTRY_STENCIL_CACHE_TTL_MS=900000
#
#
#############################################
#

INPUT_SCHEMA_DATA_TYPE=protobuf
## Kafka Consumer
#
SOURCE_KAFKA_BROKERS=localhost:19092
SOURCE_KAFKA_TOPIC=test-topic
# SOURCE_KAFKA_CONSUMER_CONFIG_MAX_POLL_RECORDS=500
# SOURCE_KAFKA_ASYNC_COMMIT_ENABLE=true
# SOURCE_KAFKA_CONSUMER_CONFIG_SESSION_TIMEOUT_MS=10000
# SOURCE_KAFKA_COMMIT_ONLY_CURRENT_PARTITIONS_ENABLE=true
# SOURCE_KAFKA_CONSUMER_CONFIG_AUTO_COMMIT_ENABLE=true
SOURCE_KAFKA_CONSUMER_GROUP_ID=sample-group-id
# SOURCE_KAFKA_POLL_TIMEOUT_MS=9223372036854775807
# SOURCE_KAFKA_CONSUMER_CONFIG_METADATA_MAX_AGE_MS=500
#
#
#############################################
#
## Filters
#
# FILTER_ENGINE=JSON
# FILTER_SCHEMA_PROTO_CLASS=com.gotocompany.firehose.consumer.SensorData
# FILTER_ESB_MESSAGE_FORMAT=PROTOBUF
# FILTER_DATA_SOURCE=message
## FILTER_JEXL_EXPRESSION=driverLocationLogKey.getVehicleType()=="BIKE"
# FILTER_JSON_SCHEMA={"properties":{"status":{"const":"WARNING"}}}
#
#############################################
#
## Retries
#
# RETRY_EXPONENTIAL_BACKOFF_INITIAL_MS=10
# RETRY_EXPONENTIAL_BACKOFF_RATE=2
# RETRY_EXPONENTIAL_BACKOFF_MAX_MS=60000
DLQ_SINK_ENABLE=true
DLQ_WRITER_TYPE=kafka
DLQ_RETRY_FAIL_AFTER_MAX_ATTEMPT_ENABLE=true
RETRY_MAX_ATTEMPTS=2
DLQ_KAFKA_TOPIC=test-topic2
DLQ_KAFKA_BROKERS=localhost:19092
ERROR_TYPES_FOR_DLQ=DEFAULT_ERROR
#
#
#############################################
#
## GRPC Sink
#
# SINK_GRPC_SERVICE_HOST=http://grpc-service.sample.io
# SINK_GRPC_SERVICE_PORT=8500
# SINK_GRPC_METHOD_URL=com.tests.SampleServer/SomeMethod
# SINK_GRPC_RESPONSE_SCHEMA_PROTO_CLASS=com.tests.SampleGrpcResponse
#SINK_GRPC_TLS_ENABLE=false
#SINK_GRPC_ROOT_CA=""

#
#
#############################################
#
## HTTP SINK
#
 SINK_HTTP_SERVICE_URL=http://localhost:8085/sink
 SINK_HTTP_REQUEST_METHOD=put
# SINK_HTTP_REQUEST_TIMEOUT_MS=10000
# SINK_HTTP_MAX_CONNECTIONS=10
 SINK_HTTP_RETRY_STATUS_CODE_RANGES=400-600
 SINK_HTTP_DATA_FORMAT=JSON
# SINK_HTTP_HEADERS=Content-Type: application/json
 SINK_HTTP_JSON_BODY_TEMPLATE={"temperature":"$.temperature","humidity":"$.humidity","message_id":"$.message_id","water":"not_available"}
 SINK_HTTP_PARAMETER_SOURCE=message
 SINK_HTTP_PARAMETER_PLACEMENT=query
 SINK_HTTP_PARAMETER_SCHEMA_PROTO_CLASS=com.gotocompany.firehose.consumer.SensorData
 INPUT_SCHEMA_PROTO_TO_COLUMN_MAPPING={"1":"temperature","2":"message_id","3":"humidity"}
# SINK_HTTP_OAUTH2_ENABLE=false

# SINK_HTTP_OAUTH2_ACCESS_TOKEN_URL=https://sample-oauth.my-api.com/oauth2/token
# SINK_HTTP_OAUTH2_CLIENT_NAME=client-name
# SINK_HTTP_OAUTH2_CLIENT_SECRET=client-secret
# SINK_HTTP_OAUTH2_SCOPE=User:read, sys:info
# SINK_HTTP_SERIALIZER_JSON_TYPECAST=[{"jsonPath": "$.temperature", "type": "INTEGER"},{"jsonPath": "$.message_id", "type": "STRING"}, {"jsonPath": "$.humidity", "type": "STRING"}]
#
#
